<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $login
 * @property string $e-mail
 * @property int $check_email
 * @property string $phone
 * @property string $password
 * @property string|null $token
 *
 * @property Chart[] $charts
 * @property Post[] $posts
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['login', 'e-mail', 'phone', 'password'], 'required'],
            [['check_email'], 'integer'],
            [['login'], 'string', 'max' => 50],
            [['e-mail', 'phone'], 'string', 'max' => 150],
            [['password'], 'string', 'max' => 200],
            [['token'], 'string', 'max' => 100],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'login' => 'Login',
            'e-mail' => 'E Mail',
            'check_email' => 'Check Email',
            'phone' => 'Phone',
            'password' => 'Password',
            'token' => 'Token',
        ];
    }

    /**
     * Gets query for [[Charts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCharts()
    {
        return $this->hasMany(Chart::className(), ['user_id' => 'id']);
    }

    /**
     * Gets query for [[Posts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Post::className(), ['user_id' => 'id']);
    }

    public function fields()
    {
        $fields= parent::fields(); // TODO: Change the autogenerated stub
        unset($fields['id'], $fields['login'], $fields['check_email'], $fields['access_token']);
        return $fields;
    }


    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {

        return static::findOne(['access_token' => $token]);
    }

    public function getId()
    {
        return $this->id;
    }

    public function getAuthKey()
    {
        return;
    }

    public function validateAuthKey($authKey)
    {
        return;
    }



}
